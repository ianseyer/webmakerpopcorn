/**
 * This Script is designed to upgrade existing popcorn projects
 * generated by Popcorn Maker PRE Webmaker V2. It will publish
 * each project the does not contain a MakeID to the MakeAPI
 * and add the newly generated MakeID to the record.
 **/

var async = require( "async" ),
    path = require( "path" ),
    config = require( "../lib/config" ),
    url = require( "url" ),

    UserClient = require( "webmaker-user-client" ),

    userClient = new UserClient({
      endpoint: config.LOGIN_SERVER_URL_WITH_AUTH
    }),

    // Database information
    dbConfig = config.database,
    sequelize = new (require( "sequelize" ))(
      dbConfig.database,
      dbConfig.username,
      dbConfig.password,
      dbConfig.options
    ),

    // Project model
    Project = sequelize.import( path.normalize( __dirname + "/../lib/models/project" ) ),

    // helper vars
    limit = 50,
    lastpid = 0,
    processed = 0,
    updated = 0;

// Resolve remix dependencies
function setUserid( project, callback ) {
  userClient.get.byEmail(project.email, function (err, resp) {
    lastpid = project.id;
    if ( err ) {
      return callback(err);
    }
    if ( !resp || !resp.user ) {
      console.log( project.id + " skipped - Webmaker user doesn't exist for " + project.email );
      return callback();
    }
    project.userid = resp.user.id;
    project.save(["userid"]).error(function( error ){
      callback(error);
    }).success(function() {
      updated++;
      console.log( project.id + " successfully updated with userid " + project.userid );
      callback();
    });
  });
}

function getNextSet( callback ) {
  Project.findAll({
    where: {
      id: {
        gt: lastpid
      },
      userid: null
    },
    limit: limit,
    order: "id ASC"
  }).complete(function( err, projects ) {
    async.eachSeries( projects, setUserid, callback );
  });
}

function migrateProjects( err ) {
  if ( err ) {
    console.log( "There was an error syncing the database: ", JSON.stringify( err ) );
    return;
  }
  Project.count({
    where: {
      userid: null
    }
  }).success(function( count ) {
    console.log( "Found " + count + " projects without userid..." );
    async.doWhilst( getNextSet, function() {
      processed += limit;
      if ( processed < count ) {
        return true
      }
      return false;
    }, function( err ) {
      if ( err ) {
        console.log( "Error: ", err );
      }
      console.log( updated + " Projects updated." );
    });
  });
}

sequelize.sync().complete( migrateProjects );
